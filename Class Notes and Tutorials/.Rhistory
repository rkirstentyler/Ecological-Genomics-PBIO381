par(mfrow=c(2,2))
gam.check(b_model_ym)
qplot(year, b_model_ym_res, data=bolton) #resid vs x
par(mfrow=c(1,2))
plot(b_model_ym, se = TRUE)
summary(b_model_ym)
anova(b_model_ym)
setwd("~/Documents/Ecological Genomics PBIO381/")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological Genomics PBIO381/")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological Genomics PBIO381/Seastar Analysis/")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
setwd("~/Documents/Ecological Genomics PBIO381/SeaStar Analysis/")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological Genomics PBIO381/SeaStar Analysis/")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological Genomics PBIO381/SeaStar Analysis")
setwd("~/Documents/Ecological Genomics PBIO381/SeaStar Analysis")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
library(readr)
countsdata_trim2 <- read_csv("~/Documents/Ecological Genomics PBIO381/SeaStar Analysis/countsdata_trim2.txt")
View(countsdata_trim2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
View(countsdata_trim2)
countsTable <- read.delim('countsdata_trim.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological Genomics PBIO381/SeaStar Analysis")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological Genomics PBIO381/SeaStar Analysis")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological Genomics PBIO381/SeaStar Analysis")
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological_Genomics_PBIO381/SeaStar_Analysis")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
tail(colData)
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
tail(colData)
dds1 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
ddsI <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location$int + health)
dim(dds)
dim(dds1)
dds1 <- dds1[ rowSums(counts(dds1)) > 100, ]
dim(dds1)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy" is the reference
colData(dds1)$health <- factor(colData(dds1)$health, levels=c("H","S")) #sets that "healthy" is the reference
dds1 <- DESeq(dds1) #Running the model
res1 <- results(dds1)
res1 <- res1[order(res$padj),] #this sorts our results by the adjusted p-value. Nice!
res1 <- res1[order(res1$padj),] #this sorts our results by the adjusted p-value. Nice!
head(res1)
summary(res1)
colData$group <- factor(paste0(colData$location$int, ".",colData$location$sub, ".", colData$health, ".")) #here we are pasting together different variables in which we are interested into a group. This helps us focus on subsets of data. We can focus on specific parts of data: specific locations, for example
setwd("~/Documents/Ecological_Genomics_PBIO381/SeaStar_Analysis")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
head(conds)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological_Genomics_PBIO381/SeaStar_Analysis")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
get(wd)
getwd
getwd()
setwd("~/Documents/Ecological_Genomics_PBIO381/SeaStar_Analysis")
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological_Genomics_PBIO381/SeaStar_Analysis")
setwd("~/Documents/Ecological_Genomics_PBIO381/SeaStar_Analysis")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
setwd("~/Documents/Ecological_Genomics_PBIO381/")
library(DESeq2)
library(ggplot2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
tail(colData)
dds1 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dim(dds1)
dds1 <- dds1[ rowSums(counts(dds1)) > 100, ]
dim(dds1)
colData(dds1)$health <- factor(colData(dds1)$health, levels=c("H","S")) #sets that "healthy" is the reference
dds1 <- DESeq(dds1) #Running the model
res1 <- results(dds1)
res1 <- res1[order(res1$padj),] #this sorts our results by the adjusted p-value. Nice!
head(res1)
summary(res1)
plot(res1)
p <- ggplot(d, aes(x= health, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
summary(res1)
vsd1 <- varianceStabilizingTransformation(dds1, blind=FALSE)
plotPCA(vsd1, intgroup=c("health","location"))
plotPCA(vsd1, intgroup=c("health"))
d <- plotCounts(dds, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","location")), returnData=TRUE)
d <- plotCounts(dds1, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= health, y=count, shape = score, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= health, y=count, shape = location, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= health, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p
d <- plotCounts(dds1, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p
d <- plotCounts(dds1, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
(paste0(colData$location, ".", colData$health, ".")
colData$group <- factor(paste0(colData$location, ".", colData$health, ".")) #here we are pasting together different variables of which we are interested into a group. This helps us focus on subsets of data. We can focus on specific parts of data: specific locations, for example
colData$group <- factor(paste0(colData$location, ".", colData$health, "."))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
head(colData$group)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
dds <- DESeq(dds, parallel=T)
colData$group <- factor(paste0(colData$location, ".", colData$health, ".")) #here we are pasting together different variables of which we are interested into a group. This helps us focus on subsets of data. We can focus on specific parts of data: specific locations, for example
dds2 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds2)
head(colData$group)
dds2 <- dds2[ rowSums(counts(dds2)) > 100, ]
dds2 <- dds2[sample(nrow(dds2), 1200), ]
dim(dds2)
dds2 <- DESeq(dds2, parallel=T) #Running the model
res2 <- results(dds2)
res2 <- res2[order(res2$padj),] #this sorts our results by the adjusted p-value. Nice!
head(res2)
summary(res2)
colData$group <- factor(paste0(colData$location, ".", colData$health, ".")) #here we are pasting together different variables of which we are interested into a group. This helps us focus on subsets of data. We can focus on specific parts of data: looking at H vs S in specific locations, for example
dds2 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds2)
head(colData$group)
dds2 <- dds2[ rowSums(counts(dds2)) > 100, ]
dds2 <- dds2[sample(nrow(dds2), 1200), ]
dim(dds2)
dds2 <- DESeq(dds2, parallel=T) #Running the model
res2 <- results(dds2, contrast=list(c("int.H."), c("int.S.")), listValues=c(1/2, -1/2))
res2 <- results(dds2)
res2 <- results(dds2, contrast=list(c("int.H."), c("int.S.")), listValues=c(1/2, -1/2))
res2 <- results(dds2, contrast=list(c("sub.H."), c("sub.S.")), listValues=c(1/2, -1/2))
res2 <- results(dds2)
res2 <- res2[order(res2$padj),] #sorting results by adjusted p-value
res2 <- results(dds2, contrast=list(c("int.H."), c("int.S.")), listValues=c(1/2, -1/2))
head(res2)
res2 <- results(dds2, contrast=list(c("int.H."), c("int.S.")), listValues=c(1/2, -1/2))
p <- ggplot(d, aes(x= location, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
d1 <- plotCounts(dds1, gene="TRINITY_DN43080_c1_g1_TRINITY_DN43080_c1_g1_i3_g.14110_m.14110", intgroup=(c("health","location")), returnData=TRUE)
d1
p1 <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p1 <- p1 + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p1
tail(res1)
head -20 (res1)
head(res1, n = 20)
head(res1, n = 50)
res1
head(res1, n = 50)
head(res1, n = 50)
res2 <- results(dds2, contrast=list(c("int.H."), c("int.S.")), listValues=c(1/2, -1/2))
res2 <- results(dds2, contrast=list(c("int.H"), c("int.S")), listValues=c(1/2, -1/2))
res2 <- results(dds2, contrast=list(c("sub.H"), c("sub.S")), listValues=c(1/2, -1/2))
colData$group <- factor(paste0(colData$location, ".", colData$health, ".")) #here we are pasting together different variables of which we are interested into a group. This helps us focus on subsets of data. We can focus on specific parts of data: looking at H vs S in specific locations, for example
dds2 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds2)
head(colData$group)
dds2 <- dds2[ rowSums(counts(dds2)) > 100, ]
dds2 <- dds2[sample(nrow(dds2), 1200), ]
dim(dds2)
dds2 <- DESeq(dds2, parallel=T) #Running the model
res2 <- results(dds2, contrast=list(c("int.H"), c("int.S")), listValues=c(1/2, -1/2))
res2 <- results(dds2, contrast=list(c("int.H."), c("int.S.")), listValues=c(1/2, -1/2))
head(colData$group)
res2 <- results(dds2, contrasts=list(c("int.H."), c("int.S.")), listValues=c(1/2, -1/2))
head(res2)
res2 <- results(dds2, contrasts=list(c("int.H."), c("int.S.")), listValues=c(1/2, -1/2))
head(res2)
res2 <- results(dds2, contrasts=list(c("sub.H."), c("sub.S.")), listValues=c(1/2, -1/2))
head(res2)
res2 <- results(dds2, contrast=list(c("int.H.","int.S.")), listValues=c(1/2, -1/2))
res2 <- results(dds2, contrast=list("int.H.","int.S."), listValues=c(1/2, -1/2))
res2 <- results(dds2, contrast=c("int.H.","int.S."), listValues=c(1/2, -1/2))
res2 <- results(dds2, contrast=c("group","int.H.","int.S."), listValues=c(1/2, -1/2))
head(res2)
res2 <- results(dds2)
res2 <- res2[order(res2$padj),] #sorting results by adjusted p-value
res2 <- results(dds2, contrast=c("group","int.H.","int.S."), listValues=c(1/2, -1/2))
head(res2)
res2 <- results(dds2)
res2 <- results(dds2)
res2 <- results(dds2, contrast=c("group","int.H.","int.S."), listValues=c(1/2, -1/2))
res2 <- res2[order(res2$padj),] #sorting results by adjusted p-value
head(res2)
res3 <- results(dds2)
res3 <- results(dds2, contrast=c("group","sub.H.","sub.S."), listValues=c(1/2, -1/2))
res3 <- res3[order(res3$padj),] #sorting results by adjusted p-value
head(res3)
res2 <- results(dds2)
res2 <- results(dds2, contrast=c("group","int.H.","int.S."), listValues=c(1/2, -1/2))
res2 <- res2[order(res2$padj),] #sorting results by adjusted p-value
head(res2)
res3 <- results(dds2)
res3 <- results(dds2, contrast=c("group","sub.H.","sub.S."), listValues=c(1/2, -1/2))
res3 <- res3[order(res3$padj),] #sorting results by adjusted p-value
head(res3)
summary(res2)
summary(res3)
colData$group <- factor(paste0(colData$location, ".", colData$health, ".")) #here we are pasting together different variables of which we are interested into a group. This helps us focus on subsets of data. We can focus on specific parts of data: looking at H vs S in specific locations, for example
dds2 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds2)
head(colData$group)
dds2 <- dds2[ rowSums(counts(dds2)) > 100, ]
dds2 <- dds2[sample(nrow(dds2), 1200), ]
dim(dds2)
dds2 <- DESeq(dds2, parallel=T) #Running the model super fast (thanks, parallel=T)
p1
res2sig <- res2[which(res2$padj < 0.01),]
dim(res2sig)
res2sig
res2 <- results(dds2)
res2 <- results(dds2, contrast=c("group","int.H.","int.S."), listValues=c(1/2, -1/2))
res2 <- res2[order(res2$padj),] #sorting results by adjusted p-value
res2sig <- res2[which(res2$padj < 0.01),]
dim(res2sig)
head(res2)
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
tail(colData)
dds1 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dds1 <- dds1[ rowSums(counts(dds1)) > 100, ]
colData(dds1)$health <- factor(colData(dds1)$health, levels=c("H","S")) #sets that "healthy" is the reference
dds1 <- DESeq(dds1) #Running the model
res1 <- results(dds1)
res1 <- res1[order(res1$padj),] #this sorts our results by the adjusted p-value. Lovely.
head(res1, n = 50)
summary(res1)
summary(res1)
d <- plotCounts(dds1, gene="TRINITY_DN43080_c1_g1_TRINITY_DN43080_c1_g1_i3_g.14110_m.14110 1105.7751", intgroup=(c("health","location")), returnData=TRUE)
d <- plotCounts(dds1, gene="TRINITY_DN43080_c1_g1_TRINITY_DN43080_c1_g1_i3_g.14110_m.14110", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
d <- plotCounts(dds1, gene="TRINITY_DN42378_c1_g1_TRINITY_DN42378_c1_g1_i2_g.12752_m.12752", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
d <- plotCounts(dds1, gene="TRINITY_DN42378_c1_g1_TRINITY_DN42378_c1_g1_i2_g.12752_m.12752", intgroup=(c("health","location")), returnData=TRUE)
d
d <- plotCounts(dds1, gene="TRINITY_DN42378_c1_g1_TRINITY_DN42378_c1_g1_i2_g.12752_m.12752", intgroup=(c("health","location")), returnData=TRUE)
d <- plotCounts(dds1, gene="TRINITY_DN43080_c1_g1_TRINITY_DN43080_c1_g1_i3_g.14110_m.14110
", intgroup=(c("health","location")), returnData=TRUE)
d <- plotCounts(dds1, gene="TRINITY_DN43080_c1_g1_TRINITY_DN43080_c1_g1_i3_g.14110_m.14110", intgroup=(c("health","location")), returnData=TRUE)
vsd1 <- varianceStabilizingTransformation(dds1, blind=FALSE)
plotPCA(vsd1, intgroup=c("health","location"))
plotPCA(vsd1, intgroup=c("health"))
colData$group <- factor(paste0(colData$location, ".", colData$health, ".")) #here we are pasting together different variables of which we are interested into a group. This helps us focus on subsets of data. We can focus on specific parts of data: looking at H vs S in specific locations, for example
dds2 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds2)
head(colData$group)
dds2 <- dds2[ rowSums(counts(dds2)) > 100, ]
dds2 <- DESeq(dds2, parallel=T) #Running the model super fast (thanks, parallel=T)
res2 <- results(dds2)
res2 <- results(dds2, contrast=c("group","int.H.","int.S."), listValues=c(1/2, -1/2))
res2 <- res2[order(res2$padj),] #sorting results by adjusted p-value
res2sig <- res2[which(res2$padj < 0.01),] #subsetting only the genes that are significantly differentially expressed in Healthy in intertidal
head(res2)
res2 <- results(dds2, contrast=c("group","int.S.","int.H."), listValues=c(1/2, -1/2))
res2 <- res2[order(res2$padj),] #sorting results by adjusted p-value
res2sig <- res2[which(res2$padj < 0.01),] #subsetting only the genes that are significantly differentially expressed in Healthy in intertidal
head(res2)
res3 <- results(dds2)
summary(res2)
res3 <- results(dds2)
res3 <- results(dds2, contrast=c("group","sub.H.","sub.S."), listValues=c(1/2, -1/2))
res3 <- res3[order(res3$padj),] #sorting results by adjusted p-value
res3sig <- res3[which(res3$padj < 0.01),] #subsetting only the genes that are significantly differentially expressed in Healthy in intertidal
head(res3)
summary(res3)
res3 <- results(dds2)
res3 <- results(dds2)
res3 <- results(dds2, contrast=c("group","sub.S.","sub.H."), listValues=c(1/2, -1/2))
res3sig <- res3[which(res3$padj < 0.01),] #subsetting only the genes that are significantly differentially expressed in Healthy in intertidal
head(res3)
summary(res3)
res3 <- results(dds2)
res3 <- results(dds2, contrast=c("group","sub.S.","sub.H."), listValues=c(1/2, -1/2))
res3 <- res3[order(res3$padj),] #sorting results by adjusted p-value
res3sig <- res3[which(res3$padj < 0.01),] #subsetting only the genes that are significantly (p < 0.01) differentially expressed in the subtidal local
head(res3)
res3sig
dim(res3sig)
res3sig <- res3[which(res3$padj < 0.01),] #subsetting only the genes that are significantly (p < 0.01) differentially expressed in the subtidal local
head(res3sig)
head(res2sig)
summary(res3)
res4 <- results(dds2)
res4 <- results(dds2, contrast=c("group","sub.S.","int.S."), listValues=c(1/2, -1/2))
res4 <- results(dds2, contrast=c("group","sub.S.","int.S."), listValues=c(1/2, -1/2))
res4 <- res3[order(res4$padj),] #sorting results by adjusted p-value
res4sig <- res4[which(res4$padj < 0.01),] #subsetting only the genes that are significantly (p < 0.01) differentially expressed in sick individuals of both locations
head(res4sig)
summary(res4sig)
res4 <- results(dds2, contrast=c("group","sub.S.","int.S."), listValues=c(1/2, -1/2))
res4 <- res4[order(res4$padj),] #sorting results by adjusted p-value
res4sig <- res4[which(res4$padj < 0.01),] #subsetting only the genes that are significantly (p < 0.01) differentially expressed in sick individuals of both locations
head(res4sig)
summary(res4sig)
p <- ggplot(d, aes(x=score, y=count, color=health, group=health))
p <- p +  geom_point() + stat_smooth(se=FALSE,method="loess") +  scale_y_log10()
p
plotMA(res2, main="DESeq2", ylim=c(-2,2))
plotMA(res2sig, main="DESeq2", ylim=c(-2,2))
plotMA(res2, main="DESeq2", ylim=c(-2,2))
vsd1 <- varianceStabilizingTransformation(dds1, blind=FALSE)
plotPCA(vsd1, intgroup=c("health","location"))
vsd2 <- varianceStabilizingTransformation(dds2, blind=FALSE)
plotPCA(vsd2, intgroup=c("health","location"))
plotPCA(vsd2, intgroup="location"
plotPCA(vsd2, intgroup="location")
plotPCA(vsd2, intgroup=c("location"))
plotPCA(vsd2, intgroup=c("health"))
plotMA(res2, main="Intertidal Comparison", ylim=c(-2,2))
source("https://bioconductor.org/biocLite.R")
biocLite("ReportingTools")
countsTable <- read.delim('countsdata_trim2.txt', header = TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
tail(colData)
dds1 <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
# Here, we are asking: what's the effect of health given the location?
# so we are focusing in on the LAST term as the one that is the main effect (health)
# in this typical model, the "health effect" represents the overall effect of health status, controlling for differences due to location
dim(dds1)
dds1 <- dds1[ rowSums(counts(dds1)) > 100, ]
colData(dds1)$health <- factor(colData(dds1)$health, levels=c("H","S")) #sets that "health" is the reference
dds1 <- DESeq(dds1) #Running the model
library(ReportingTools)
des2Report <- HTMLReport(shortName = 'RNAseq_analysis_with_DESeq2',
title = 'RNA-seq analysis of differential expression using DESeq2',
reportDirectory = "./reports")
publish(dds1,des2Report, pvalueCutoff=0.05,
annotation.db="org.Mm.eg.db", factor = colData(dds1)$location + health,
reportDir="./reports")
des2Report <- HTMLReport(shortName = 'RNAseq_analysis_with_DESeq2',
title = 'RNA-seq analysis of differential expression using DESeq2',
reportDirectory = "./reports")
publish(dds1,des2Report, pvalueCutoff=0.05,
annotation.db="org.Mm.eg.db", factor = colData(dds1)$location,
reportDir="./reports")
finish(des2Report)
des2Report
res1 <- results(dds1)
res1 <- res1[order(res1$padj),] #this sorts our results by the adjusted p-value. Lovely.
head(res1, n = 50)
summary(res1)
install.packages("xtable")
library(xtables)
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
sum1table<-xtable(summary(res1))
sum1table<-xtable(res1)
sumres1 <- summary(res1)
sum1table<-xtable(sumres1)
summary(res1)
d <- plotCounts(dds1, gene="TRINITY_DN43080_c1_g1_TRINITY_DN43080_c1_g1_i3_g.14110_m.14110", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
d <- plotCounts(dds1, gene="TRINITY_DN42378_c1_g1_TRINITY_DN42378_c1_g1_i2_g.12752_m.12752", intgroup=(c("health","location")), returnData=TRUE)
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
d <- plotCounts(dds1, gene="TRINITY_DN42378_c1_g1_TRINITY_DN42378_c1_g1_i2_g.12752_m.12752", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
d <- plotCounts(dds1, gene="TRINITY_DN46136_c0_g1_TRINITY_DN46136_c0_g1_i2_g.21366_m.21366", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
head(res1, n = 20)
res1
p <- p + geom_point(position=position_jitter(w=0.3,h=0.3), size = 3)
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0.7), size = 3)
p
p <- p + geom_point(position=position_jitter(w=0.5,h=0.5), size = 3)
p
p <- p + geom_point(position=position_jitter(w=1,h=1), size = 3)
p
p <- p + geom_point(position=position_jitter(w=1,h=0), size = 3)
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=1,h=0), size = 3)
p
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=1), size = 3)
p
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
d <- plotCounts(dds1, gene="TRINITY_DN43359_c0_g1_TRINITY_DN43359_c0_g1_i1_g.14658_m.14658", intgroup=(c("health","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= location, y=count, shape = health, color = health)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
latex(summary(res1))
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
latex(summary(res1))
summary.formula(res1)
describe(res1)
describe(summary(res1))
sumres1 <- summary(res1)
write.table(sumres1)
tablesumres1 <- write.table(sumres1)
tablesumres1
sumres1 <- summary(res1)
capture.output(sumres1, file = "res1_summary.txt")
print(xtable(s), file = "res1_summary.txt")
latex(sumres1)
summary(res1)
summary(res2)
summary(res3)
