#  ggplot(mapping=aes(x = p, y = posterior)) +
#         geom_line()
# Chunk 3
#prior is >= 0.5
par(mfrow=c(1,1))
prior1 <- ifelse( p < 0.5 , 0 , 1 )
plot(p,prior1,type="l")
#get the likelihood for our 10,000 potential parameter values
par(mfrow=c(1,2))
likelihood<-dbinom(6, size=9, prob = p)
plot(p,likelihood,type="l")
#multiply the likelihood by the prior
posterior1<-likelihood*prior1
#standardize by dividing by the sum(likelihood*prior)
posterior1<-posterior1/sum(likelihood*prior1)
plot(p,posterior1,type="l")
#prior is double exponential
par(mfrow=c(1,1))
prior2 <- exp( -6*abs( p - 0.6 ) )
plot(p,prior2,type="l")
par(mfrow=c(1,2))
likelihood<-dbinom(6, size=9, prob = p)
plot(p,likelihood,type="l")
#multiply the likelihood by the prior
posterior2<-likelihood*prior2
#standardize by dividing by the sum(likelihood*prior)
posterior2<-posterior2/sum(likekihood*prior2)
plot(p,posterior2,type="l")
# Chunk 4
par(mfrow=c(1,3))
#Sampling from the posterior
samples<-sample(p, prob = posterior, size = 10000, replace = TRUE)
plot(samples)
#sample(randomly samples from grid p, prob = with weighted frequencies based on the posterior probabilities, size = number of times to sample, with replacement=TRUE)
library(rethinking)
#to install:
#install.packages(c("coda","mvtnorm","devtools"))
#library(devtools)
#devtools::install_github("rmcelreath/rethinking")
par(mfrow=c(1,2))
#plotting the calculated posterior for comparison
plot(p, posterior, type="l")
# Chunk 5
#for the computed distribution
sum(posterior[p<0.5])
#this is saying that there is a 17% chance that water on the globe is less than 0.5
#for the samples, find the frequency of parameter values <0.5: sum the # of times samples had a p < 0.5 and divide that number by the total number of samples
sum(samples<0.5)/10000
# Chunk 6
#Using the samples.
sum(samples > 0.5 & samples < 0.75)/10000
# Chunk 7
#Lower 80%
quantile(samples, 0.8)
#Middle 80%
quantile(samples, c(0.1, 0.9))
# Chunk 8
quantile(samples, c(0.025, 0.975))
# Chunk 9
#from calculated posterior: (most probably parameter value)
p[which.max(posterior)]
#from samples: (chainmode is in the rethinking package which i can't get right now)
chainmode(samples, adj=0.01)
#returns the estimated mode of a density computed from samples (the most common value from a vector / list)
# Chunk 10
#from samples:
#mean
mean(samples)
#median
median(samples)
# Chunk 11
#We'll use 8 of 12 as an example below
# complete the grid approximation for the posterior below:
#create a vector of potential parameter values (define the grid)
par(mfrow=c(1,2))
p<-seq(0,1, length.out = 10000)
plot(p)
#create the priors using the previous data
prior<-dbinom(6, size = 9, prob = p)
plot(p,prior,type="l")
#get the likelihood for each potential paramter value
likelihood<-dbinom(7, size = 13, prob = p)
plot(p,likelihood,type="l")
#multiply the likelihood by the prior
posterior3<-likelihood*prior
#standardize by dividing by the sum(likelihood*prior)
posterior3<-posterior3/sum(posterior3)
plot(p,posterior3,type="l")
#Sampling from the posterior
samples3<-sample(p, posterior3, size = 10000, replace = TRUE)
plot(samples3)
dens(samples3)
#get the boundaries for the middle 80% using the samples (samples3)
quantile(samples3, c(0.1,0.9))
#how does this compare to the first (uninformed prior) posterior?
quantile(samples, c(0.1,0.9))
# Chunk 12
install.packages("rstanarm")
install.packages("Rcpp")
library(abd)
library(rstanarm)
options(mc.cores = parallel::detectCores()) #allows your computer to use more of itself to make this go faster.
# Chunk 13
puffer<-Pufferfish
puffer_mod <- stan_glm(predators~resemblance, data=puffer, family = gaussian)
#in this version, the priors are stated explicitly, but are the same as the defaults (above)
puffer_mod <- stan_glm(predators~resemblance, data=puffer, family = gaussian(),
prior = normal(0,2.5), #first prior for the slope
prior_intercept = normal(0,10)) #second prior for intercept
# Chunk 14: Puffer_converge
#Did the chains converge?
plot(puffer_mod, plotfun = "trace") #using the "plot function (plotfun)"
#intercept
#resemblance = slope
#sigma = standard deviation
install.packages("Rcpp")
install.packages("rstanarm")
install.packages("rstanarm")
plot(puffer_mod_p, "dens_overlay")
plot(puffer_mod, "dens_overlay")
plot(puffer_mod, "hist")
plot(puffer_mod, "areas")
plot(puffer_mod, "areas", prob=0.067)
plot(puffer_mod, "areas", prob=0.67)
plot(puffer_mod, "areas", prob=0.67, prob_outer=0.80)
library(rstan)
stan_ac(puffer_mod)
res<- residuals(puffer_mod)
qqplot(pred, predators, data=puffer) + geom_abline(slope = 1)
par(mfrow=c(1,2))
res<- residuals(puffer_mod)
pred<- predict(puffer_mod)
qqplot(pred, predators, data=puffer) + geom_abline(slope = 1)
par(mfrow=c(1,2))
res<- residuals(puffer_mod)
pred<- predict(puffer_mod)
qqplot(pred, predators, data=puffer) + geom_abline(slope = 1)
qplot(pred, res)
qqnorm(res)
qqline(res)
hist(res)
qplot(resemblance, res, data = puffer) #resid vs x
puffer_pred<-posterior_predict(puffer_mod) #The resulting matrix has rows equal to the number of posterior simulations, which in this case is 4000 and columns equal to the number of observations in the original dataset, which is 20 here. Take a look:
head(puffer_pred)
pp_check(puffer_mod, plotfun = "ppc_error_hist", bindwidth=3)
pp_check(puffer_mod, plotfun = "hist", bindwidth=3, nreps = 5)
pp_check(puffer_mod, plotfun = "hist", binwidth=3, nreps = 5)
pp_check(puffer_mod, plotfun = "ppc_error_hist", binwidth=3)
pp_check(puffer_mod, plotfun = "boxplot")
pp_check(puffer_mod, plotfun = "scatter_avg")
pp_check(puffer_mod, plotfun = "scatter")
pp_check(puffer_mod, plotfun = "stat")
pp_check(puffer_mod, plotfun = "stat_2d", test = c("mean", "sd"))
pp_check(puffer_mod, plotfun = "dens_overlay", nreps = 300)
summary(puffer_mod)
summary(puffer_mod)
plot(puffer_mod, prob = 0.8, prob_outer=0.95)
posterior_interval(puffer_mod, prob = 0.95)
post_puffer<- as.data.frame(puffer_mod)
head(post_puffer)
nrow(post_puffer)
sum(post_puffer[,1]<0/nrow(post_puffer))
sum(post_puffer[,1]<0)/nrow(post_puffer))
sum((post_puffer[,1]<0)/nrow(post_puffer))
sum((post_puffer[,2]<0)/nrow(post_puffer))
pufferplot <- ggplot(puffer, aes(x=resemblance, y=predators)) +
geom_point(size=2) +
ylab("Predator Approaches per Trial") +
xlab("Dissimilarity to Toxic Pufferfish") +
theme_bw(base_size=12)
pufferplot
pufferplot + geom_abline(slope=coef(puffer_mod_p)[2], intercept=coef(puffer_mod_p)[1], color="red")
pufferplot
pufferplot + geom_abline(slope=coef(puffer_mod_p)[2], intercept=coef(puffer_mod_p)[1], color="red")
pufferplot
pufferplot + geom_abline(slope=coef(puffer_mod_p)[2], intercept=coef(puffer_mod)[1], color="red")
pufferplot + geom_abline(slope=coef(puffer_mod)[2], intercept=coef(puffer_mod)[1], color="red")
pufferplot +
geom_abline(slope = post_puffer[,2], intercept = post_puffer[,1], color="lightgrey", alpha=0.1) +
geom_abline(slope=coef(puffer_mod)[2], intercept=coef(puffer_mod)[1], color="red")
n
pois_data <- c(6, 6, 13, 7, 11, 10, 9, 7, 7, 12)
head(pois_data)
pois_data <- c(6, 6, 13, 7, 11, 10, 9, 7, 7, 12)
library(dplyr)
library(tidyr)
bayes_analysis <- data.frame(lambda =seq(5,13, by = 1))
#get likelihood
bayes_analysis <- rowwise(bayes_analysis)
bayes_analysis <- mutate(bayes_analysis, lik = prod(dpois(pois_data, lambda = lambda)))
bayes_analysis <- ungroup(bayes_analysis)
library(dplyr)
library(tidyr)
library(broom)
library(ggplot2)
library(abd)
daphnia<-DaphniaLongevity
daphnia<-mutate(daphnia, Spores=sqrt.spores^2) #this untransforms the data
head(daphnia)
daphnia<-mutate(daphnia, Spores=sqrt.spores^2) #this untransforms the data
head(daphnia)
daph_plot <- ggplot(daphnia, aes(x=longevity, y=Spores)) + geom_point() +
theme_bw(base_size=17)
daph_plot <- ggplot(daphnia, aes(x=longevity, y=Spores)) + geom_point() +
theme_bw(base_size=17)
daph_plot
daph_plot +
stat_smooth("lm")
daph_plot +
stat_smooth("lm")
daph_plot +
stat_smooth(method = "lm")
daph.lm<-lm(Spores~longevity,data=daphnia)
par(mfrow=c(1,2))
plot(daph.lm, which=1:2)
qplot(Spores,P,data=daphnia)+geom_point() + geom_abline(slope = 1)
qplot(Spores,P,data=daphnia)+geom_point() + geom_abline(slope = 1)
qplot(Spores,p,data=daphnia)+geom_point() + geom_abline(slope = 1)
p<-fitted(daph.lm)
qplot(Spores,p,data=daphnia)+geom_point() + geom_abline(slope = 1)
daph_sq <- lm(Spores~longevity + I(longevity^2), data = daphnia)
plot(daph_sq, which = 1:2)
p<-fitted(daph_sq)
qplot(Spores,p,data=daph_sq) + abline(slope = 1)
qplot(Spores,p,data=daph_sq) + geom_abline(slope = 1)
daph_plot +
stat_smooth(method = "lm", formula = y ~ x + I(x^2))
lidet<-read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_02_16_Nonlinear/LIDETlab.csv")
head(lidet)
lidet<-mutate(lidet, M.t=M_t/100)
ML <- ggplot(lidet, aes(x=t, y=M.t)) +
geom_point() +
theme_bw(base_size=14)
ML + facet_wrap(~SPP)
ML + facet_wrap(~SITE)
trae<-subset(lidet,SPP=="TRAE")
head(trae)
ML.trae<-ggplot(trae, aes(x=t, y=M.t)) +
geom_point() +
theme_bw(base_size=14)
ML.trae
ML.trae + stat_smooth(method="lm", formula = y ~ x + 0 + offset(rep(1,length(x))))
ML.trae + stat_smooth(method="lm", formula = y ~ x)
ML.trae + stat_smooth(method="lm", formula = y ~ x + 0 + offset(rep(1,length(x)))) # the zero means don't fit an intercept. the offset rep... means use 1 for every time you use an intercept
ML.trae + stat_smooth(method="lm", formula = y ~ x)
trae.lm<-lm(M.t ~ t,data=trae)
coef(trae.lm)
trae.lm.int<-lm(M.t~0 + t + offset(rep(1,nrow(trae))),data=trae)
coef(trae.lm.int)
plot(trae.lm.int, which = 1:2)
qplot(M.t~t,p,data=trae) + geom_abline(slope = 1)
qplot(M.t,p,data=trae) + geom_abline(slope = 1)
p<-fitted(trae.lm.int)
qplot(M.t,p,data=trae) + geom_abline(slope = 1)
trae<-mutate(trae, l.Mt<-log(M.t))
head(trae)
lML.trae<-ggplot(trae, aes(x=t, y=l.Mt)) +
geom_point() +
theme_bw(base_size=14)
lML.trae + stat_smooth(method="lm", formula = y ~ x + 0 + offset()rep(log(1), lenth(x)))
lML.trae + stat_smooth(method="lm", formula = y ~ x + 0 + offset(rep(log(1)), lenth(x)))
lML.trae + stat_smooth(method="lm", formula = y ~ x + 0 + offset(rep(log(1)), length(x)))
lML.trae + stat_smooth(method="lm", formula = y ~ x + 0 + offset(rep(log(1)), length(x)))
lML.trae + stat_smooth(method="lm", formula = y ~ x + 0 + offset(rep(log(1), length(x))))
l.trae.lm<-lm(l.Mt ~ t + 0 + offset(rep(log(1), nrow(trae))),data=trae)
par(mfrow=c(1,2))
plot(l.trae.lm, which = 1:2)
p<-fitted(l.trae.lm)
p<-fitted(l.trae.lm)
qplot(l.Mt, p, data = trae) + geom_abline(slope = 1)
trae.nls<-nls(M.t ~ 1 * exp(-k*t), start = list(k=4), data = trae, trace = TRUE)
summary(trae.nls)
trae.nls<-nls(M.t ~ 10 * exp(-k*t), start = list(k=4), data = trae, trace = TRUE)
trae.nls<-nls(M.t ~ 1 * exp(-k*t), start = list(k=10), data = trae, trace = TRUE)
trae.nls<-nls(M.t ~ 1 * exp(-k*t), start = list(k=1), data = trae, trace = TRUE)
MR<-function(k){
Mp = 1*exp(-k*trae$t)
return(Mp)
}
Mhat<-MR(k=3)
ML.trae + geom_line(aes(x = trae$t, y = Mhat))
Mhat<-MR(k=0.5)
#plot the values
ML.trae + geom_line(aes(x = trae$t, y = Mhat))
Mhat<-MR(k=0.3)
ML.trae + geom_line(aes(x = trae$t, y = Mhat))
par(mfrow=c(1,2))
res<-residuals(trae.nls)
pred<-predict(trae.nls)
qplot(pred, M.t, data=trae) +
geom_abline(slope=1)
qplot(pred, res)
plot(trae.lm.int,which=1)
plot(l.trae.lm, which=1)
qqnorm(res)
qqline(res)
qqline(res)
hist(res)
qplot(trae$t, res) #resid vs x
summary(trae.nls)
ML.trae + geom_line(aes(x=trae$t, y= pred), col="red")
library(stats)
library(car)
library(car)
install.packages("car")
library(car)
MRx<-function(x,k){
Mp=1*exp(-k*x)
return(Mp)
}
b<-bootCase(trae.nls)
head(b) #contains 999 k's from resampled data
newdat<-data_frame(seq(0.5, 11, length=101))
newdat<-mutate(newdat, M.t=predict(trae.nls, newdata = newdat))
newdat<-mutate(newdat, M.t=predict(trae.nls$M.t, newdata = newdat))
newdats<-mutate(newdat, M.t=predict(trae.nls, newdata = newdat))
newdat<-mutate(newdat, M.t=predict(trae.nls, newdata = newdat))
newdat<-data_frame(t=seq(0.5, 11, length=101))
newdat<-mutate(newdat, M.t=predict(trae.nls, newdata = newdat))
head(newdat)
owls<-read.table("~/Downloads/Data_03_01_Random&Lab/Owls.txt", header = TRUE, dec = ".")
M.gls=NegPerChick ~ SexParent * FoodTreatment + SexParent * ArrivalTime, data(owls, method = "REML")
M.gls=gls(NegPerChick ~ SexParent * FoodTreatment + SexParent * ArrivalTime, data(owls, method = "REML"))
library(nlme)
M.gls=gls(NegPerChick ~ SexParent * FoodTreatment + SexParent * ArrivalTime, data(owls, method = "REML"))
M.gls <- gls(NegPerChick ~ SexParent * FoodTreatment + SexParent * ArrivalTime, data(owls, method = "REML"))
M.gls <- gls(NegPerChick ~ SexParent * FoodTreatment + SexParent * ArrivalTime, data = owls, method = "REML"))
M.gls <- gls(NegPerChick ~ SexParent * FoodTreatment + SexParent * ArrivalTime, data = owls, method = "REML")
plot(M.gls)
owls<-mutate(owls, LogNeg=log10(owls$NegPerChick+1))
head(owls)
owls<-mutate(owls, LogNeg=log10(owls$NegPerChick+1))
library(tidyr)
owls<-mutate(owls, LogNeg=log10(owls$NegPerChick+1))
library(dplyr)
owls<-mutate(owls, LogNeg=log10(owls$NegPerChick+1))
head(owls)
Form<-formula(LogNeg~SexParent*FoodTreatment+SexParent*ArrivalTime) #so we don't have to type this model over and over again
M.gls=gls(Form, data = owls, method = "REML")
plot(M.gls) #looks better?
E=resid(M.gls, type="normalized")
op<-par(mar=c(3,3,2,2),mfrow=c(1,1))
boxplot(E~Nest,data=owls,axes=FALSE,ylim=c(-3,3))
abline(0,0)
axis(2)
text(1:27,-2.5, levels(owls$Nest),cex=0.75,srt=65)
par(op) #resets the graphics to defaults
M1.lme=lme(Form, random = ~1 | Nest, method = "REML", data = owls)
plot(M1.lme)
M2.lme=lme(Form, random = ~1 + ArrivalTimeNest, method = "REML", data = owls)
plot(M2.lme)
M2.lme=lme(Form, random = ~1 + ArrivalTimeNest, method = "REML", data = owls)
M2.lme=lme(Form, random = ~1 + ArrivalTime | Nest, method = "REML", data = owls)
plot(M2.lme)
AIC(M.gls,M1.lme,M2.lme)
E2<-resid(M2.lme,type="normalized")
F2<-fitted(M2.lme)
qplot(F2, LogNeg, data=owls) +
geom_abline(slope=1)
library(plot)
library(ggplot2)
qplot(F2, LogNeg, data=owls) +
geom_abline(slope=1)
qplot(F2,E2)
plot(M2.lme)
qplot(F2, LogNeg, data=owls) +
geom_abline(slope=1)
qplot(ArrivalTime, E2, data=owls)
qplot(SexParent, E2, data=owls)
qplot(FoodTreatment, E2, data=owls)
qqnorm(E2)
qqline(E2)
hist(E2)
qplot(F2, LogNeg, data=owls) +
geom_abline(slope=1)
summary(M2.lme)
bees<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data_03_01_Random&Lab/Bees.txt", header = TRUE, dec = ".")
head(bees)
bees$fHive <- factor(bees$Hive)
bees$Infection01 <- bees$Infection
bees$Infection01[bees$Infection01 > 0] <- 1
bees$fInfection01 <- factor(bees$Infection)
tail(bees,30)
dotchart(bees, groups = fHive)
dotchart(bees, groups = Hive)
dotchart(bees, groups = bees$Hive)
?dotchart
dotchart(bees$Hives, groups = Hive)
dotchart(bees$Hives, groups = 3)
dotchart(bees$Hives, groups = Hives)
dotchart(bees$Spobee, groups = bees$fHives)
boxplot(Spobee~fInfection01, data = bees)
fInfection01
summary(bees$fInfection01)
bees$Infection01 <- bees$Infection
bees$Infection01[bees$Infection01 > 0] <- 1
bees$fInfection01 <- factor(bees$Infection)
tail(bees,30)
dotchart(bees$Spobee, groups = bees$fHives)
boxplot(Spobee ~ fInfection01, data = bees)
summary(bees$fInfection01)
bees$Infection01 <- bees$Infection
bees$Infection01[bees$Infection01 > 0] <- 1
bees$fInfection01 <- factor(bees$Infection)
summary(bees$fInfection01)
bees$Infection01 <- bees$Infection
Infection01
bees$Infection01
bees$Infection01[bees$Infection01 > 0] <- 1
bees$Infection01
bees$fInfection01 <- factor(bees$Infection01)
tail(bees,30)
dotchart(bees$Spobee, groups = bees$fHives)
boxplot(Spobee ~ fInfection01, data = bees)
summary(bees$fInfection01)
bees.lm<-lm(Spobee ~ BeesN * fInfection01)
bees.lm<-lm(Spobee ~ BeesN * fInfection01, data = bees)
r = residuals(bees.lm)
p = predict(bees.lm)
plot(bees.lm)
bees.lm<-lm(Spobee ~ BeesN + fInfection01, data = bees)
r = residuals(bees.lm)
p = predict(bees.lm)
plot(bees.lm)
bees.lm<-lm(Spobee ~ BeesN * fInfection01, data = bees)
r = residuals(bees.lm)
p = predict(bees.lm)
plot(bees.lm)
boxplot(r ~ fHive, data = bees)
boxplot(r, ~ fInfection01)
boxplot(r ~ fInfection01, data = bees)
endless_horse(what = "Hello world!", endless = TRUE, wait = 0.5)
install.packages(cowsay)
install.packages("cowsay")
endless_horse(what = "Hello world!", endless = TRUE, wait = 0.5)
library(cowsay)
endless_horse(what = "Hello world!", endless = TRUE, wait = 0.5)
endless_horse(what = "Meghywinks!", endless = FALSE, wait = 0.5)
endless_horse(what = "LET'S GO TO MEXICO, YOU WHORES!", endless = FALSE, wait = 0.5)
endless_horse(what = "Hey, how did I get in here?", endless = FALSE, wait = 0.5)
bees$Lspobee<-log10(bees$Spobee + 1)
head(bees)
dotchart(bees$Spobee)
dotchart(bees$LSpobee)
dotchart(bees$Lspobee)
boxplot(Lspobee ~ fInfection01, data = bees)
bees.lm2<-lm(Lspobee ~ BeesN * fInfection01, data = bees)
res <- residuals(bees.lm2)
pred <- predict(bees.lm2)
plot(x = pred, y = res)
res2 <- resid(bees.lm2)
boxplot(fHives, data = bees)
boxplot(fHive, data = bees)
res2 <- resid(bees.lm2)
#create a boxplot for hives
boxplot(res2 ~ fHive, data = bees)
abline(a=0,b=0)
boxplot(res2 ~ fHive, data = bees)
#add a line at zero:
abline(a=0,b=0)
boxplot(res2 ~ fInfection01, data = bees)
plot(res2 ~ BeesN, data = bees)
endless_horse(what = "Fuck me in the asshole!!", endless = FALSE, wait = 0.5)
say(what = "Fuck me in the asshole!!", endless = FALSE, wait = 0.5)
say(what = "Fuck you!!", endless = FALSE, wait = 0.5)
say(what = "oh fuck", by = "cat")
say(what = "oh fuck", by = "snowman")
say(what = "oh fuck", by = "rms")
say(what = "oh fuck", by = "horse")
say(what = "oh fuck", by = "poop")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
setwd("~/")
setwd("~/Documents/Ecological_Genomics_PBIO381/Pop_Gen")
setwd("~/Documents/Ecological_Genomics_PBIO381/Pop_Gen")
list.files()
H_freq <- read.table("H_AlleleFreqs.frg", header = T)
list.files()
setwd("~/Documents/Ecological_Genomics_PBIO381/Pop_Gen")
list.files()
setwd("~/Documents/Ecological_Genomics_PBIO381/Pop_Gen")
list.files()
setwd("~/Documents/Ecological_Genomics_PBIO381/Pop_Gen")
list.files()
setwd("~/Documents/Ecological_Genomics_PBIO381")
list.files()
pwd
pwd()
list.files()
setwd("~/Documents/Ecological_Genomics_PBIO381")
list.files()
setwd("~/Documents/Ecological_Genomics_PBIO381/Pop_Gen")
list.files()
H_freq <- read.table("H_AlleleFreqs.frg", header = T)
S_freq <- read.table("S_AlleleFreqs.frq", header = T)
H_freq <- read.table("H_AlleleFreqs.frq", header = T)
S_freq <- read.table("S_AlleleFreqs.frq", header = T)
str(H_freq)
All_freq <- merge(H_freq, S_freq, by = c("CHROM", "POS"))
str(All_freq) #shows the structure of the data
head(All_freq)
hist(All_freq$diff, breaks = 50, col = "red", "Allele frequency difference (H-S)")
hist(All_freq$diff, breaks=50, col="red", "Allele frequency difference (H-S)")
hist(All_freq$diff, breaks=50, col="red", main = "Allele frequency difference (H-S)")
All_freq$diff <- (All_freq$H_ALT - All_freq$S_ALT)
hist(All_freq$diff, breaks=50, col="red", main = "Allele frequency difference (H-S)")
fst <- read.table("HvS_Fst.weir.fst", header=T)
All_freq.fst <- merge(All_freq, fst, by=c("CHROM", "POS"))
plot(All_freq.fst$diff, All_freq.fst$WEIR_AND_COCKERHAM_FST, xlab="Allele frequency difference (H-S)", ylab="Fst", main="Healthy vs. Sick SNP divergence")
All_freq.fst[which(All_freq.fst$WEIR_AND_COCKERHAM_FST>0.2),]
All_freq[which(All_freq.fst$WEIR_AND_COCKERHAM_FST>0.2),]
