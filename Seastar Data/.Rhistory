deet_chains <- as.data.frame(deet_mod)
deet_plot +
geom_abline(intercept=coef(deet_mod)[,1], slope = coef(deet_mod)[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=coef(deet_mod)[1], slope = coef(deet_mod)[2], color="red") +
geom_point()
summary(deet_mod, digits=5)
posterior_interval(deet_mod, prob = 0.95)
deet_chains <- as.data.frame(deet_mod)
deet_plot +
geom_abline(intercept=coef(deet_mod)[,1], slope = coef(deet_mod)[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=coef(deet_mod)[1], slope = coef(deet_mod)[2], color="red") +
geom_point()
zoo <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_01_24/17q02ZooMortality Clubb and Mason 2003 replica.csv")
head(zoo)
l.homerange
zoo <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_01_24/17q02ZooMortality Clubb and Mason 2003 replica.csv")
head(zoo)
zoo$l.homerange<-log(zoo$homerange)
head(zoo)
zoo_plot <- ggplot(data = zoo, aes(x=mortality, y=l.homerange))
zoo_plot <- ggplot(data=fat, aes(x=leanness, y=lossrate)) +
geom_point()
zoo_plot
zoo_mod <- stan_glm(zoo_mod)
zoo_plot <- ggplot(data = zoo, aes(x=mortality, y=l.homerange)) +
geom_point()
zoo_plot
zoo_mod <- stan_glm(l.homerange ~ mortality, data = zoo, family = gaussian)
plot(zoo_mod, plotfun = "trace")
plot(zoo_mod, plotfun="dens_overlay")
stan_ac(zoo_mod)
zoo_fit <- predict(zoo_mod)
zoo_res <- residuals(zoo_mod)
qqplot(zoo_fit, l.homerange, data = zoo) + geom_abline(slope = 1)
zoo_mod <- stan_glm(l.homerange ~ mortality, data = zoo, family = gaussian)
zoo_plot <- ggplot(data = zoo, aes(x=mortality, y=l.homerange)) +
geom_point()
zoo_mod <- stan_glm(l.homerange ~ mortality, data = zoo, family = gaussian)
plot(zoo_mod, plotfun = "trace")
plot(zoo_mod, plotfun="dens_overlay")
stan_ac(zoo_mod)
zoo_fit <- predict(zoo_mod)
zoo_res <- residuals(zoo_mod)
qqplot(zoo_fit, l.homerange, data = zoo) + geom_abline(slope = 1)
pp_check(zoo_mod, plotfun = "ppc_error_hist")
qplot(zoo_fit, zoo_res)
hist(zoo_res) #residuals histogram
qqplot(zoo_fit, l.homerange, data = zoo) + geom_abline(slope = 1)
zoo_fit<-posterior_predict(zoo_mod)
head(zoo_fit)
qplot(zoo_fit, zoo_res)
qqnorm(zoo_res)
qqnorm(zoo_res)
qqline(zoo_res)#QQ plot and line
hist(zoo_res) #residuals histogram
qplot(mortality, zoo_res, data = zoo) #resid vs x
pp_check(zoo_mod, plotfun = "ppc_error_hist", binwidth=3)
pp_check(zoo_mod, plotfun = "scatter_avg") #avg of reps & obs mean
pp_check(zoo_mod, plotfun="stat") #compare mean & SD from obs & simulations
pp_check(zoo_mod, plotfun="dens_overlay",nreps=300) #posterior vs simulated posteriors
pp_check(zoo_mod, plotfun="dens_overlay",nreps=300) #posterior vs simulated posteriors
pp_check(zoo_mod, plotfun="hist", binwidth=3, nreps = 5) #data v simulations, histograms
pp_check(zoo_mod, plotfun="boxplot") #data v simulations, boxplots
pp_check(zoo_mod, plotfun="boxplot", notch=FALSE) #notch at FALSE
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
pois_data <- c(6, 6, 13, 7, 11, 10, 9, 7, 7, 12)
library(dplyr)
library(tidyr)
#create vector of possible lambda values
bayes_analysis <- data.frame(lambda =seq(6,13, by = 1))
#get likelihood
bayes_analysis <- rowwise(bayes_analysis)
bayes_analysis <- mutate(bayes_analysis, lik = prod(dpois(pois_data, lambda = lambda)))
bayes_analysis <- ungroup(bayes_analysis)
#add a column for the prior
bayes_analysis <- mutate(bayes_analysis, prior = dunif(lambda, min = 6, max = 13))
#add a column for the numerator = likelihood * prior
bayes_analysis <- mutate(bayes_analysis, numerator = lik * prior)
#create a column for the calculated posterior
bayes_analysis <- mutate(bayes_analysis, posterior = numerator/(sum(numerator)))
#plot the posterior
library(ggplot2)
ggplot(data=bayes_analysis, mapping = aes(x = lambda, y = posterior)) +
geom_bar(stat="identity")
#create columns for the new prior and the new posterior
bayes_analysis <- mutate(bayes_analysis, prior2 = dpois(x=lambda, lambda = 7), posterior2 = (lik*prior2)/sum(lik*prior2))
#plot the old and new priors for comparison
ggplot(data=bayes_analysis) +
geom_area(alpha=0.5, fill="red", mapping=aes(x=lambda, y=posterior)) +
geom_area(alpha=0.5, fill="blue", mapping=aes(x=lambda, y=posterior2)) +
ggtitle("Red = Flat Prior, Blue = Informative Prior")
#alpha = for transparency
#install.packages(c("rstanarm","Rcpp"))
library(rstanarm)
seals <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_01_24/17e8ShrinkingSeals Trites 1996.csv")
head(seals)
options(mc.cores = parallel::detectCores())
set.seed(607)
seal_lm_bayes <- stan_glm(length.cm ~ age.days,
data = seals,
family=gaussian())
qplot(fat_fit, lossrate, data=fat) +
geom_abline(slope=1)
pp_check(fat_mod, plotfun = "scatter_avg")
qplot(fat_fit, fat_res)
qqnorm(fat_res)
qqnorm(fat_res)
qqline(fat_res)
hist(fat_res) #residuals histogram
qplot(leanness, fat_res, data=fat) #resid vs x
pp_check(fat_mod, plotfun = "ppc_error_hist")
pp_check(fat_mod, plotfun="stat") #avg of reps & obs mean
pp_check(fat_mod, plotfun="stat") #avg of reps & obs mean
pp_check(fat_mod, plotfun="stat_2d", test = c("mean","sd")) #compare mean & SD from obs & simulations
pp_check(fat_mod, plotfun="dens_overlay",nreps=300) #posterior vs simulated posteriors
pp_check(fat_mod, plotfun = "hist", nreps=5) #data v simulations, histograms
pp_check(fat_mod, plotfun="boxplot") #data v simulations, boxplots
plot(fat_mod, porb = 0.8, prob_outer = 0.95)
posterior_interval(fat_mod, prob = 0.95)
fat_chains <- as.data.frame(fat_mod)
fat_plot +
geom_abline(intercept=fat_chains[,1], slope = fat_chains[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=coef(fat_mod)[1], slope = coef(fat_mod)[2], color="red") +
geom_point()
deet <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_01_24/17q24DEETMosquiteBites.csv")
head(deet)
head(deet)
deet_plot <- ggplot(data=deet, aes(x=dose, y=bites)) +
geom_point()
deet_plot
deet_mod <- stan_glm(bites ~ dose,
data = deet,
family=gaussian())
deet_mod <- stan_glm(bites ~ dose,
data = deet,
family=gaussian())
deet_mod <- stan_glm(bites ~ dose,
data = deet,
family=gaussian())
plot(deet_mod, plotfun = "trace")
plot(deet_mod, plotfun="dens_overlay")
stan_ac(deet_mod)
deet_fit <- predict(deet_mod)
deet_res <- residuals(deet_mod)
qplot(deet_fit, dose, data=deet) +
geom_abline(slope=1)
qplot(deet_fit, dose, data=deet) +
geom_abline(slope=-1)
deet_fit<-posterior_predict(deet_mod)
head(deet_fit)
pp_check(deet_mod, plotfun = "scatter")
qplot(deet_fit, deet_res)
qplot(deet_res, deet_fit)
deet_fit <- predict(deet_mod)
deet_res <- residuals(deet_mod)
qplot(deet_res, deet_fit)
qqnorm(deet_res)
qqline(deet_res)
hist(deet_res) #residuals histogram
qplot(dose, deet_res, data=deet) #resid vs x
pp_check(deet_mod, plotfun = "ppc_error_hist", binwidth=3)
pp_check(deet_mod, plotfun = "scatter_avg") #avg of reps & obs mean
pp_check(deet_mod, plotfun="stat", test = c("mean","sd")) #compare mean & SD from obs & simulations
pp_check(deet_mod, plotfun="dens_overlay",nreps=300) #posterior vs simulated posteriors
pp_check(deet_mod, plotfun = "hist", binwidth=3, nreps = 5) #data v simulations, histograms
pp_check(deet_mod, plotfun = "boxplot") #data v simulations, boxplots
plot(deet_mod, prob = 0.8, prob_outer=0.95)
posterior_interval(deet_mod, prob = 0.95)
deet_chains <- as.data.frame(deet_mod)
deet_plot +
geom_abline(intercept=coef(deet_chains)[,1], slope = coef(deet_chains)[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=coef(deet_mod)[1], slope = coef(deet_mod)[2], color="red") +
geom_point()
deet_plot +
geom_abline(intercept=coef(deet_chains)[,1], slope = coef(deet_chains)[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=coef(deet_mod)[1], slope = coef(deet_mod)[2], color="red") +
geom_point()
deet_chains <- as.data.frame(deet_mod)
deet_plot +
geom_abline(intercept=coef(deet_chains)[,1], slope = coef(deet_chains)[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=coef(deet_mod)[1], slope = coef(deet_mod)[2], color="red") +
geom_point()
summary(deet_mod)
zoo <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_01_24/17q02ZooMortality Clubb and Mason 2003 replica.csv")
head(zoo)
zoo$l.homerange<-log(zoo$homerange)
head(zoo)
zoo_plot <- ggplot(data = zoo, aes(x=mortality, y=l.homerange)) +
geom_point()
zoo_plot
zoo_mod <- stan_glm(l.homerange ~ mortality, data = zoo, family = gaussian)
plot(zoo_mod, plotfun = "trace")
plot(zoo_mod, plotfun="dens_overlay")
stan_ac(zoo_mod)
zoo_fit <- predict(zoo_mod)
zoo_res <- residuals(zoo_mod)
#linearity
#point - obs v. pred
qqplot(zoo_fit, l.homerange, data = zoo) + geom_abline(slope = 1)
zoo$l.homerange<-log(zoo$homerange)
head(zoo)
qqplot(zoo_fit, l.homerange, data = zoo) + geom_abline(slope = 1)
zoo_fit<-posterior_predict(zoo_mod)
head(zoo_fit)
qplot(zoo_fit, zoo_res)
qplot(zoo_fit, zoo_res)
zoo_fit <- predict(zoo_mod)
zoo_res <- residuals(zoo_mod)
qplot(zoo_fit, zoo_res)
qqnorm(zoo_res)
qqline(zoo_res)#QQ plot and line
hist(zoo_res) #residuals histogram
qplot(mortality, zoo_res, data = zoo) #resid vs x
pp_check(zoo_mod, plotfun = "ppc_error_hist", binwidth=3) #WAIT A MINUTE what the heck is that? Those look quite different.
pp_check(zoo_mod, plotfun = "scatter_avg") #avg of reps & obs mean
pp_check(zoo_mod, plotfun="stat") #compare mean & SD from obs & simulations
pp_check(zoo_mod, plotfun="dens_overlay",nreps=300) #posterior vs simulated posteriors #that doesn't look too good. It's ok, I guess.
pp_check(zoo_mod, plotfun="hist", binwidth=3, nreps = 5) #data v simulations, histograms
pp_check(zoo_mod, plotfun="boxplot") #data v simulations, boxplots
pp_check(zoo_mod, plotfun="boxplot", notch=FALSE) #notch at FALSE
plot(zoo_mod, prob = 0.8, prob_outer=0.95)
plot(deet_mod, prob = 0.95)
plot(deet_mod, prob = 0.95, prob_outer = 0.95)
zoo_chains <-  as.data.frame(zoo_mod)
zoo_chains <-  as.data.frame(zoo_mod)
zoo_plot + geom_abline(slope = zoo_chains[,2], intercept = zoo_chains[,1], color="lightgrey", alpha=0.1) +
geom_abline(slope=coef(puffer_mod)[2], intercept=coef(puffer_mod)[1], color="red")
zoo_chains <-  as.data.frame(zoo_mod)
zoo_plot + geom_abline(slope = zoo_chains[,2], intercept = zoo_chains[,1], color="lightgrey", alpha=0.1) +
geom_abline(slope=coef(zoo_mod)[2], intercept=coef(zoo_mod)[1], color="red")
fat_plot <- ggplot(data=fat, aes(x=leanness, y=lossrate)) +
geom_point()
fat_plot
fat_mod <- stan_glm(lossrate ~ leanness,
data = fat,
family=gaussian())
plot(fat_mod, plotfun = "trace")
plot(fat_mod, plotfun="dens_overlay")
stan_ac(fat_mod)
fat_fit <- predict(fat_mod)
fat_res <- residuals(fat_mod)
qplot(fat_fit, lossrate, data=fat) +
geom_abline(slope=1)
pp_check(fat_mod, plotfun = "scatter_avg")
qplot(fat_fit, fat_res)
qqnorm(fat_res)
qqline(fat_res)
hist(fat_res) #residuals histogram
qplot(leanness, fat_res, data=fat) #resid vs x
pp_check(fat_mod, plotfun = "ppc_error_hist")
pp_check(fat_mod, plotfun="stat") #avg of reps & obs mean
pp_check(fat_mod, plotfun="stat_2d", test = c("mean","sd")) #compare mean & SD from obs & simulations
pp_check(fat_mod, plotfun="dens_overlay",nreps=300) #posterior vs simulated posteriors
pp_check(fat_mod, plotfun = "hist", nreps=5) #data v simulations, histograms
pp_check(fat_mod, plotfun="boxplot") #data v simulations, boxplots
plot(fat_mod, porb = 0.8, prob_outer = 0.95)
posterior_interval(fat_mod, prob = 0.95)
fat_chains <- as.data.frame(fat_mod)
fat_plot +
geom_abline(intercept=fat_chains[,1], slope = fat_chains[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=coef(fat_mod)[1], slope = coef(fat_mod)[2], color="red") +
geom_point()
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
pois_data <- c(6, 6, 13, 7, 11, 10, 9, 7, 7, 12)
library(dplyr)
library(tidyr)
#create vector of possible lambda values
bayes_analysis <- data.frame(lambda =seq(6,13, by = 1))
#get likelihood
bayes_analysis <- rowwise(bayes_analysis)
bayes_analysis <- mutate(bayes_analysis, lik = prod(dpois(pois_data, lambda = lambda)))
bayes_analysis <- ungroup(bayes_analysis)
#add a column for the prior
bayes_analysis <- mutate(bayes_analysis, prior = dunif(lambda, min = 6, max = 13))
#add a column for the numerator = likelihood * prior
bayes_analysis <- mutate(bayes_analysis, numerator = lik * prior)
#create a column for the calculated posterior
bayes_analysis <- mutate(bayes_analysis, posterior = numerator/(sum(numerator)))
#plot the posterior
library(ggplot2)
ggplot(data=bayes_analysis, mapping = aes(x = lambda, y = posterior)) +
geom_bar(stat="identity")
#create columns for the new prior and the new posterior
bayes_analysis <- mutate(bayes_analysis, prior2 = dpois(x=lambda, lambda = 7), posterior2 = (lik*prior2)/sum(lik*prior2))
#plot the old and new priors for comparison
ggplot(data=bayes_analysis) +
geom_area(alpha=0.5, fill="red", mapping=aes(x=lambda, y=posterior)) +
geom_area(alpha=0.5, fill="blue", mapping=aes(x=lambda, y=posterior2)) +
ggtitle("Red = Flat Prior, Blue = Informative Prior")
#alpha = for transparency
#install.packages(c("rstanarm","Rcpp"))
library(rstanarm)
seals <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_01_24/17e8ShrinkingSeals Trites 1996.csv")
head(seals)
options(mc.cores = parallel::detectCores())
set.seed(607)
seal_lm_bayes <- stan_glm(length.cm ~ age.days,
data = seals,
family=gaussian())
plot(seal_lm_bayes, plotfun="trace")
summary(seal_lm_bayes)
plot(seal_lm_bayes, "dens_overlay")
plot(seal_lm_bayes, "hist")
#you can also see them one at a time as:
plot(seal_lm_bayes, "dens_overlay", par="(Intercept)")
plot(seal_lm_bayes, "hist", par="age.days")
plot(seal_lm_bayes, "areas", pars = "age.days",
prob = 0.67, prob_outer = 1.0)
#prob gives the "confidence" interval of choice (default = 0.5)
#prob_outer is the probability mass to include in the plot; default is 0.9 for interval (prob) and 1.0 for area (prob_outer)
#Below, plot the 80% interval, showing the full distribution (prob_outer as above)
plot(seal_lm_bayes, "areas", pars = "age.days",
prob = 0.80, prob_outer=1.0)
#Here is a different way to see the same interval:
plot(seal_lm_bayes, "intervals", pars = "age.days",prob=0.8)
library(rstan)
stan_ac(seal_lm_bayes)
fit_vals <- fitted(seal_lm_bayes)
res <- residuals(seal_lm_bayes)
#linearity - obs v. pred
qplot(fit_vals, age.days, data=seals) +
geom_abline(slope=1)
#Homogeneity of variances - Residuals vs fitted
qplot(fit_vals, res)
#Normality
qqnorm(res)
qqline(res)
hist(res)
qplot(age.days, res, data=seals) #resid vs x
pp_check(seal_lm_bayes, plotfun = "ppc_error_hist",binwidth=3)
pp_check(seal_lm_bayes, plotfun = "scatter_avg", nreps=3)
#or for individual runs:
pp_check(seal_lm_bayes, plotfun = "scatter", nreps=3)
pp_check(seal_lm_bayes, plotfun="stat")
pp_check(seal_lm_bayes, plotfun = "stat_2d", test = c("mean", "sd"))
pp_check(seal_lm_bayes, plotfun = "hist",binwidth=3, nreps=5)
pp_check(seal_lm_bayes, plotfun="boxplot", nreps=5)
pp_check(seal_lm_bayes,plotfun="dens_overlay",nreps=30)
#adding extra digits as some of these are quite small
summary(seal_lm_bayes, digits=5)
plot(seal_lm_bayes, par="(Intercept)")
plot(seal_lm_bayes, par="age.days")
plot(seal_lm_bayes, par="sigma")
seal_chains <- as.data.frame(seal_lm_bayes)
head(seal_chains)
sum(seal_chains$age.days<0)/nrow(seal_chains)
sum(seal_chains$age.days>0.00229 &
seal_chains$age.days<0.00235) / nrow(seal_chains)
mean(seal_chains$age.days)
median(seal_chains$age.days)
posterior_interval(seal_lm_bayes)
#you can also get different intervals by specifiying `prob`:
posterior_interval(seal_lm_bayes, prob=0.8)
#the data
seal_plot <- ggplot(data = seals, mapping=aes(x = age.days, y = length.cm)) +
geom_point(size=2)
#add the fit
seal_plot +
geom_abline(intercept = coef(seal_lm_bayes)[1], slope = coef(seal_lm_bayes)[2],
color="red")
seal_plot +
geom_abline(intercept = seal_chains[,1], slope = seal_chains[,2], color="grey", alpha=0.6) +
geom_abline(intercept = coef(seal_lm_bayes)[1], slope = coef(seal_lm_bayes)[2], color="red")
posterior_vs_prior(seal_lm_bayes, pars="age.days")
seal_lm_bayes_prior <- stan_glm(length.cm ~ age.days,
data = seals,
family=gaussian(),
prior = normal(1,0.1),
prior_intercept = normal(0, 10))
posterior_vs_prior(seal_lm_bayes_prior, pars="age.days")
fat <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_01_24/17q04BodyFatHeatLoss Sloan and Keatinge 1973 replica.csv")
head(fat)
#initial visualization to determine if lm is appropriate
fat_plot <- ggplot(data=fat, aes(x=leanness, y=lossrate)) +
geom_point()
fat_plot
#fit the model!
fat_mod <- stan_glm(lossrate ~ leanness,
data = fat,
family=gaussian())
# Inspect chains for convergence
plot(fat_mod, plotfun = "trace")
#Inspect Posteriors
plot(fat_mod, plotfun="dens_overlay")
#Inspect Chains for Autocorrelation
stan_ac(fat_mod)
#model assumptions - standard & Bayesian checks
fat_fit <- predict(fat_mod)
fat_res <- residuals(fat_mod)
#linearity
#point - obs v. pred
qplot(fat_fit, lossrate, data=fat) +
geom_abline(slope=1)
#simulations
pp_check(fat_mod, plotfun = "scatter_avg")
#homogeneity of errors
#point - res v. pred
qplot(fat_fit, fat_res)
#normality
#point
qqnorm(fat_res)
qqline(fat_res)
hist(fat_res) #residuals histogram
qplot(leanness, fat_res, data=fat) #resid vs x
#simulations
pp_check(fat_mod, plotfun = "ppc_error_hist")
##match to posterior & data
pp_check(fat_mod, plotfun="stat") #avg of reps & obs mean
pp_check(fat_mod, plotfun="stat_2d", test = c("mean","sd")) #compare mean & SD from obs & simulations
pp_check(fat_mod, plotfun="dens_overlay",nreps=300) #posterior vs simulated posteriors
pp_check(fat_mod, plotfun = "hist", nreps=5) #data v simulations, histograms
pp_check(fat_mod, plotfun="boxplot") #data v simulations, boxplots
#coefficients
plot(fat_mod, porb = 0.8, prob_outer = 0.95)
#confidence intervals, 95%
posterior_interval(fat_mod, prob = 0.95)
#visualize with mean fit and all chain fits
fat_chains <- as.data.frame(fat_mod)
fat_plot +
geom_abline(intercept=fat_chains[,1], slope = fat_chains[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=coef(fat_mod)[1], slope = coef(fat_mod)[2], color="red") +
geom_point()
deet <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data_01_24/17q24DEETMosquiteBites.csv")
head(deet)
#initial visualization to determine if lm is appropriate
deet_plot <- ggplot(data=deet, aes(x=dose, y=bites)) +
geom_point()
deet_plot
#fit the model!
deet_mod <- stan_glm(bites ~ dose,
data = deet,
family=gaussian())
# Inspect chains for convergence
plot(deet_mod, plotfun = "trace")
#Inspect Posteriors
plot(deet_mod, plotfun="dens_overlay")
#Inspect Chains for Autocorrelation
stan_ac(deet_mod)
#model assumptions - standard & Bayesian checks
#get predicted and residuals
deet_fit <- predict(deet_mod)
deet_res <- residuals(deet_mod)
#linearity
#point - obs v. pred
qplot(deet_fit, dose, data=deet) +
geom_abline(slope=-1)
#simulations
deet_fit<-posterior_predict(deet_mod)
head(deet_fit)
pp_check(deet_mod, plotfun = "scatter")
#homogeneity of errors
#point - res v. pred
qplot(deet_res, deet_fit)
deet_fit <- predict(deet_mod)
deet_res <- residuals(deet_mod)
qplot(deet_res, deet_fit)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
source("http://bioconductor.org/workflows.R")
workflowInstall("rnaseqGene")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
setwd("~/Documents/Adv Quant Methods for Life Sci NR395/Seastar Data")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ day + location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colSums(counts(dds)) #how many reads are coming from each sample
hist(colSums(counts(dds)), breaks = 80, xlim=c(0,max(colSums(counts(dds)))))
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
dds <- DESeq(dds)  # this step takes a loooong time ~4 minutes with the trimmed data set
save(dds, file="dds.trim.Robject")
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i1_g.23138_m.23138", intgroup=(c("status","day","location")), returnData=TRUE)
d
d <- plotCounts(dds, gene="TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i1_g.23138_m.23138", intgroup=(c("status","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = date)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + scale_y_log10(breaks=c(25,100,1000)) + ylim(0,2500)
p
v
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
d <- plotCounts(dds, gene="TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i1_g.23138_m.23138", intgroup=(c("status","day","location")), returnData=TRUE)
str(dds)
d <- plotCounts(dds, gene="TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i1_g.23138_m.23138", intgroup=(c("health","day","location")), returnData=TRUE)
d
head(d)
p <- ggplot(d, aes(x= health, y=count, shape = date)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + scale_y_log10(breaks=c(25,100,1000)) + ylim(0,2500)
p <- ggplot(d, aes(x= health, y=count, shape = day)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + scale_y_log10(breaks=c(25,100,1000)) + ylim(0,2500)
p <- ggplot(d, aes(x= health, y=count, shape = day)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + scale_y_log10(breaks=c(25,100,1000)) + ylim(0,2500)
p
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
